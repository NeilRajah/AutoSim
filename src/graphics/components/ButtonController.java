/**
 * ButtonController
 * Author: Neil Balaskandarajah
 * Created on: 21/03/2020
 * Versatile controller for a button component
 */

package graphics.components;

import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import graphics.components.BoxButton.BUTTON_STATE;

public class ButtonController implements MouseListener {
	//Attributes
	private BoxButton button; //button to control
	private Runnable method; //method to run when clicked
	private boolean methodRan; //whether the method has already run or not
	
	/**
	 * Create a controller for the button
	 * @param button Button to control
	 */
	public ButtonController(BoxButton button) {
		//set attributes
		this.button = button;
		this.methodRan = false;
	} //end constructor
	
	/**
	 * Create a controller for the button
	 * @param button Button to control
	 * @param method Method to run when presed
	 */
	public ButtonController(BoxButton button, Runnable method) {
		//set attributes
		this.button = button;
		this.method = method;
		this.methodRan = false;
	} //end constructor
	
	/**
	 * Change the color to dark when the mouse enters
	 * @param m MouseEvent generated by interface
	 */
	public void mouseEntered(MouseEvent m) {
		button.setState(BUTTON_STATE.HOVER);

		button.setCursor(new Cursor(Cursor.HAND_CURSOR));
	} //end mouseEntered

	/**
	 * Change the color to light when the mouse leaves
	 * @param m MouseEvent generated by interface
	 */
	public void mouseExited(MouseEvent m) {
		button.setState(BUTTON_STATE.DEFAULT);

		button.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
	} //end mouseExited

	/**
	 * Change the color to a darker dark when the mouse is pressed
	 * @param m MouseEvent generated by interface
	 */
	public void mousePressed(MouseEvent m) {
		button.setState(BUTTON_STATE.LOCK);
		
		//if the method exists and hasn't ran
		if (method != null && !methodRan) {
			method.run();	
			this.methodRan = true;
		} //end	
	} //end mousePressed

	/**
	 * Change the color back to light when the mouse is releaed
	 * @param m MouseEvent generated by interface
	 */
	public void mouseReleased(MouseEvent m) {
		button.setState(BUTTON_STATE.HOVER);		
	} //end mouseReleased
	
	/*
	 * Unimplemented
	 */
	public void mouseClicked(MouseEvent m) {}
} //end class
